# auth-config.mdc

```markdown
# Auth Config Rules

This document incorporates directives from:
- **PRD & Tech Stack**: FastAPI backend, Supabase (PostgreSQL + RLS), React + TypeScript frontend.
- **Schema Design & DB Rules**: Tablas `equipos`, `tickets`, `tickets_hist` y pol√≠ticas RLS por rol.
- **Implementation Plan**: CI gates, error model unificado y metas de seguridad/rendimiento.
- **Cursorrules**: Consistencia de contratos (OpenAPI ‚Üî DB) y manejo de errores sin PII.
- **Cursor Context & Memory Bank**: Registrar decisiones y cambios en `cursor-context.md`, `prompts-library.md`, `development-log.md`.

---

## Identity Provider & Model
- **Identity**: Supabase Auth (email/contrase√±a).  
  - Opcional: Google OAuth en fase posterior.
- **Roles (claim role)**: `admin`, `tecnico`, `usuario`.  
- **JWT**: emitido por Supabase; incluir `sub` (user_id), `role`, `iat`, `exp`.  
- **Lifespan**:  
  - `access_token`: corto (‚âà15‚Äì30 min).  
  - `refresh_token`: rotatorio (‚âà7‚Äì30 d√≠as).  
- **Storage**:  
  - Preferir **httpOnly cookie** en backend-proxy o uso del SDK de Supabase (sin exponer tokens en JS).  
  - Si se usa `Authorization: Bearer`, nunca persistir en `localStorage`.

---

## Authorization (Roles & RLS)

### Usuario
- `equipos`: lectura de **sus equipos**.  
- `tickets`: crear; leer los propios o de sus equipos; **no editar ajenos**.

### T√©cnico
- `tickets`: leer/actualizar asignados (estado, notas).  
- Puede leer equipos relacionados.  

### Admin
- Acceso completo: lectura/escritura/borrado en m√≥dulos autorizados.

### RLS (resumen)
- Activo en `equipos`, `tickets`, `tickets_hist` con pol√≠ticas por rol (ver `.cursor/rules/db.mdc`).  
- Todas las rutas de API deben respetar estas pol√≠ticas (**sin bypass** en SQL/RPC).  

---

## Tokens & Sessions
- **Rotaci√≥n**: refrescar tokens antes de expirar; invalidar en logout/reset.  
- **Revocaci√≥n**: lista en backend (si se emiten tokens propios) o confiar en Supabase.  
- **Clock skew**: tolerancia ¬±60s en validaciones `exp/iat`.  
- **CSRF**:  
  - Con cookies httpOnly: requerir CSRF token en m√©todos mutadores (POST/PATCH/DELETE).  
  - Con header Bearer: CSRF no aplica, pero reforzar rate limiting.  

---

## Auth Endpoints & Flows (OpenAPI)
- `POST /auth/login` ‚Üí `200 {accessToken?, expiresIn?, user}` √≥ `204` si SDK maneja sesi√≥n.  
  - `429` on brute-force; `401` credenciales inv√°lidas.  
- `POST /auth/logout` ‚Üí `204`.  
- `POST /auth/refresh` ‚Üí `200 {accessToken, expiresIn}`.  
- `POST /auth/password/reset-request` ‚Üí `204` (respuesta gen√©rica, sin revelar si el email existe).  
- `POST /auth/password/reset` ‚Üí `204` (token de un solo uso).  
- `GET /auth/profile` ‚Üí `200 {id, email, role}`; `401` si no autenticado.  

üîë **Errores normalizados**: `{code, message, details, traceId}` en todas las rutas.

---

## Security Controls
- **Rate limiting**: login/reset (5‚Äì10 req/min/IP). Bloqueo 15 min tras 5 fallos.  
- **Password policy**: longitud m√≠nima, mezcla de clases, bloqueo tras intentos fallidos.  
- **Secrets**: solo en variables de entorno; nunca en cliente/repos.  
- **CORS**: configurado por entorno; cookies con `SameSite=Lax|Strict`, `Secure` en HTTPS.  
- **ETag/If-Match**: para actualizar recursos sensibles (ej. perfil), evitar sobrescritura concurrente.  
- **Auditor√≠a**: registrar login/logout, cambios de rol, resets, creaci√≥n/actualizaci√≥n de tickets (via `tickets_hist` o `audit_logs`).  
- **PII**: no loggear correos/identificadores en claro; mascar en errores/logs.  

---

## UI & Error Handling (FE)
- Estados de pantalla: `loading / empty / error / success`.  
- Mostrar banners de error con **traceId**; mensajes sin PII.  
- **401** ‚Üí redirigir a login.  
- **403** ‚Üí ‚ÄúPermisos insuficientes‚Äù.  
- **429** ‚Üí sugerir reintento.  
- Persistir solo metadatos no sensibles (ej. rol) en memoria/estado; nunca tokens si cookies httpOnly.  

---

## Testing & Monitoring
- **Unit (BE)**: validaci√≥n de payloads y decodificaci√≥n/renovaci√≥n de JWT.  
- **Integration**: flujos `login ‚Üí crear ticket ‚Üí listar` con usuarios de prueba por rol (ver RLS).  
- **E2E**: Playwright ‚Üí login, acceso por rol, 401/403/429.  
- **Seguridad**: pruebas de rate-limit, timing, enumeraci√≥n de usuarios (reset-request).  
- **Observabilidad**: m√©tricas ‚Üí intentos fallidos, √©xito de refresh, latencia P95 de `/auth/*`. Logs con traceId.  

---

## Acceptance Checklist
- ‚úî Roles (`admin`, `tecnico`, `usuario`) definidos y propagados en JWT/claims.  
- ‚úî RLS activo en tablas principales y probado por rol.  
- ‚úî Endpoints de auth implementados y documentados en OpenAPI.  
- ‚úî Errores normalizados `{code, message, details, traceId}`.  
- ‚úî Rate limiting y bloqueo ante fuerza bruta activos.  
- ‚úî Cookies httpOnly o Bearer definido (una sola estrategia, documentada).  
- ‚úî Reset de contrase√±a sin revelar existencia de usuario.  
- ‚úî Auditor√≠a de eventos cr√≠ticos habilitada.  
- ‚úî Pruebas unit/integration/E2E verdes; sin High/Critical en auditor√≠as.  

---

## Open Questions
- Estrategia final de sesi√≥n: **cookies httpOnly v√≠a backend proxy** vs **Authorization: Bearer con SDK**.  
- ¬øHabilitar Google OAuth en MVP o fase posterior?  
- Umbrales exactos de **rate limit** y bloqueo.  
- Pol√≠tica de expiraci√≥n/rotaci√≥n de **refresh tokens**.  
- Atributos extra en claims (¬øtenant_id/org_id?) en caso de multi-tenant futuro.  

---

```