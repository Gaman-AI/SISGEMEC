# Backend Structure ‚Äî SISGEMEC

## 1. Introducci√≥n
**Objetivos del Backend SISGEMEC:**
- Gestionar equipos, usuarios, solicitudes y servicios.
- Exponer APIs REST seguras para el frontend.
- Procesar reportes y exportaciones (Excel, PDF).
- Autenticaci√≥n y autorizaci√≥n con **Supabase Auth (JWT + RLS)**.
- Arquitectura escalable con **FastAPI + Docker**.

**Funcionalidades principales:**
- CRUD de usuarios, equipos, solicitudes, servicios.
- Seguimiento de solicitudes ‚Üí t√©cnicos asignados actualizan estados.
- Reportes con filtros y exportaci√≥n.
- Notificaciones internas y, en futuro, v√≠a correo.

---

## 2. System Architecture
El backend est√° compuesto por **un √∫nico servicio en FastAPI** (a diferencia del modelo ‚Äúdos servicios‚Äù de referencia).

```mermaid
graph TD
    subgraph User_Interaction
        U[Frontend React]
    end
    subgraph Backend [FastAPI API]
        direction LR
        API[Endpoints /api/*]
        AUTH[JWT Validation]
        CRUD[Equipos, Solicitudes, Servicios]
        REPORTS[Reportes/Exportes]
    end
    subgraph External_Services
        SUPA_DB[(Supabase PostgreSQL)]
        SUPA_STORE[(Supabase Storage)]
        SUPA_AUTH[(Supabase Auth)]
    end
    U --> API
    API --> AUTH
    API --> CRUD
    API --> REPORTS
    CRUD --> SUPA_DB
    REPORTS --> SUPA_DB
    API --> SUPA_STORE
    AUTH --> SUPA_AUTH
```

---

## 3. Database Management
- **Motor principal**: Supabase PostgreSQL.  
- **Tablas clave**: usuarios, equipos, solicitudes, servicios, reportes.  
- **Raw files**: Supabase Storage (para exportes Excel/PDF).  
- **RLS**: aplicado en Supabase para restringir accesos por rol.  

---

## 4. API Design & Endpoints
üîπ **Usuarios / Autenticaci√≥n**  
- `POST /api/login` ‚Üí login via Supabase Auth.  
- `GET /api/profile` ‚Üí datos del usuario autenticado.  

üîπ **Equipos**  
- `GET /api/equipos` ‚Üí listar equipos.  
- `POST /api/equipos` ‚Üí crear equipo.  
- `PUT /api/equipos/{id}` ‚Üí actualizar.  
- `DELETE /api/equipos/{id}` ‚Üí eliminar.  

üîπ **Solicitudes**  
- `POST /api/solicitudes` ‚Üí responsable crea solicitud.  
- `GET /api/solicitudes` ‚Üí listar solicitudes (seg√∫n rol).  
- `PUT /api/solicitudes/{id}` ‚Üí actualizar estado/respuesta.  

üîπ **Servicios**  
- `POST /api/servicios` ‚Üí t√©cnico registra servicio.  
- `GET /api/servicios` ‚Üí historial de servicios.  

üîπ **Reportes**  
- `GET /api/reportes` ‚Üí listar resultados con filtros.  
- `POST /api/reportes/export` ‚Üí exportar Excel/PDF.  

---

## 5. Hosting & Infraestructura
- **Contenedores**: Docker (FastAPI backend + React frontend).  
- **Base de datos y storage**: Supabase (PostgreSQL + Storage + Auth).  
- **Frontend**: Vercel (primario).  
- **CI/CD**: GitHub Actions (build, test, deploy).  

---

## 6. Security
- **Autenticaci√≥n**: JWT de Supabase Auth.  
- **Autorizaci√≥n**: Control por rol (admin, t√©cnico, responsable).  
- **RLS**: Supabase limita acceso a datos seg√∫n `auth.uid()`.  

**Cifrado:**
- En tr√°nsito ‚Üí HTTPS/TLS.  
- En reposo ‚Üí cifrado nativo de Supabase.  

---

## 7. Data Flow (Solicitud de Servicio)
```mermaid
sequenceDiagram
    participant Responsable
    participant FE as Frontend (React)
    participant BE as Backend (FastAPI)
    participant DB as Supabase DB
    Responsable->>FE: Crear Solicitud
    FE->>BE: POST /api/solicitudes (JWT)
    BE->>BE: Validar JWT y rol
    BE->>DB: Insert solicitud
    DB-->>BE: OK
    BE-->>FE: Confirmaci√≥n
    FE-->>Responsable: Solicitud registrada
```

---

## 8. Monitoring & Maintenance
- **Logging**: configurado en FastAPI (rotaci√≥n de logs + consola).  
- **Monitoreo**: Supabase logs + GitHub Actions checks.  
- **Pr√≥ximos pasos**: integraci√≥n con Sentry para errores.  
